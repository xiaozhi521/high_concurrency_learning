####通过 ThreadPoolExecutor 来创建一个线程池
    new ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime,milliseconds,runnableTaskQueue, handler)
 
- 1、corePoolSize（线程池的基本大小） : 当提交一个任务到线程池时，线程池会创建一个线程来执行任务，即使其他空
 闲的基本线程能够执行新任务也会创建线程，等到需要执行的任务数大于线程池基本大小 时就不再
 创建。如果调用了线程池的prestartAllCoreThreads()方法，线程池会提前创建并启动所有基本线程
- 2、maximumPoolSize : （线程池最大数量）：线程池允许创建的最大线程数。如果队列满了，并
 且已创建的线程数小于最大线程数，则线程池会再创建新的线程执行任务。值得注意的是，如
 果使用了无界的任务队列这个参数就没什么效果
- 3、keepAliveTime : （线程活动保持时间）：线程池的工作线程空闲后，保持存活的时间。所以，
  如果任务很多，并且每个任务执行的时间比较短，可以调大时间，提高线程的利用率
 
- 4、TimeUnit（milliseconds 线程活动保持时间的单位）：可选的单位有天（DAYS）、小时（HOURS）、
分钟（MINUTES）、毫秒（MILLISECONDS）、微秒（MICROSECONDS，千分之一毫秒）、
纳秒（NANOSECONDS，千分之一微秒）
- 5、runnableTaskQueue（任务队列）：用于保存等待执行的任务的阻塞队列。可以选择以下几个阻塞队列
  - ArrayBlockingQueue：是一个基于数组结构的有界阻塞队列，此队列按FIFO（先进先出）原则对元素进行排序
  - LinkedBlockingQueue：一个基于链表结构的阻塞队列，此队列按FIFO排序元素，吞吐量通常要高于ArrayBlockingQueue。
        静态工厂方法Executors.newFixedThreadPool()使用了这个队列。
  - SynchronousQueue：一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，
        否则插入操作一直处于阻塞状态，吞吐量通常要高于Linked-BlockingQueue，
        静态工厂方法Executors.newCachedThreadPool使用了这个队列。
  - PriorityBlockingQueue：一个具有优先级的无限阻塞队列
- 6、RejectedExecutionHandler（饱和策略）：当队列和线程池都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的新任务。
 这个策略默认情况下是AbortPolicy，表示无法处理新任务时抛出异常。
 在JDK 1.5中Java线程池框架提供了以下4种策略。
  - AbortPolicy：直接抛出异常。
  - CallerRunsPolicy：只用调用者所在线程来运行任务。
  - DiscardOldestPolicy：丢弃队列里最近的一个任务，并执行当前任务。
  - DiscardPolicy：不处理，丢弃掉。
  当然，也可以根据应用场景需要来实现RejectedExecutionHandler接口自定义策略。如记录日志或持久化存储不能处理的任务
- 7、ThreadFactory：用于设置创建线程的工厂，可以通过线程工厂给每个创建出来的线程设置更有意义的名字。
 使用开源框架guava提供的ThreadFactoryBuilder可以快速给线程池里的线程设置有意义的名字，代码如下。
 
  
    new ThreadFactoryBuilder().setNameFormat("XX-task-%d").build();
 
####二、 向线程池提交任务
 - 1、execute()方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功。
  通过以下代码可知execute()方法输入的任务是一个Runnable类的实例
  
  
    threadsPool.execute(new Runnable() {
        @Override
        public void run() {
        // TODO Auto-generated method stub
        }
    });
- 2、submit()方法用于提交需要返回值的任务。线程池会返回一个future类型的对象，通过这个
  future对象可以判断任务是否执行成功，并且可以通过future的get()方法来获取返回值，get()方
  法会阻塞当前线程直到任务完成，而使用get（long timeout，TimeUnit unit）方法则会阻塞当前线
  程一段时间后立即返回，这时候有可能任务没有执行完
  
  
    Future<Object> future = executor.submit(harReturnValuetask);
    try {
        Object s = future.get();
    } catch (InterruptedException e) {
        // 处理中断异常
    } catch (ExecutionException e) {
        // 处理无法执行任务异常
    } finally {
        // 关闭线程池
        executor.shutdown();
    }
 
####三、关闭线程池
 调用线程池的 shutdown 或 shutdownNow 方法来关闭线程池
 - 原理：
 
 
    遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法终止；
 - 区别：
   
    
    shutdownNow 首先将线程池的状态设置成STOP，然后尝试停止所有的正在执行或暂停任务的线程，并返回等待执行任务的列表；
    shutdown 只是将线程池的状态设置成SHUTDOWN状态，然后中断所有没有正在执行任务的线程；
 
 - isShutdown ：只要调用了这两个关闭方法中的任意一个，返回 true
 - isTerminaed ： 当所有的线程池任务都关闭后，才表示线程池关闭成功，返回 true
 
 - 通常使用 shutdown 方法来关闭线程池
 - 如果任务不一定需要完成，则可以调用 shutdownNow 方法
 
 #### 线程池的监控
 - taskCount：线程池需要执行的任务数量
 - completedTaskCount：线程池在运行过程中已完成的任务数量，小于或等于taskCount
 - largestPoolSize：线程池里曾经创建过的最大线程数量。
            通过这个数据可以知道线程池是否曾经满过，如该数值等于线程池的最大大小，则表示线程池曾经满过
 - getPoolSize：线程池的线程数量。如果线程池不销毁的话，线程池里的线程不会自动销毁，所以这个大小只增不减
 - getActiveCount：获取活动的线程数
 
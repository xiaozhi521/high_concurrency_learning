超负载了怎么办：拒绝策略
        ThreadPoolExecutor 的最后一个参数指定了拒绝策略，也就是当任务数量超过系统实际承载能力时，这时候要用到拒绝
    策略。拒绝策略可以说是系统超负荷运行时的补救措施，通常由于压力太大引起的，也就是线程池中的线程已经用完了，无法
    继续为新任务服务，同时，等待队列中也已经排满了，再也塞不下新任务了。这时，我们就需要有一套机制，合理地处理这个
    问题。

优化线程池线程数量
        线程池的大小对系统性能有一定的影响。过大或过小的线程数量都无法发挥最优的系统性能，但是线程池的大小的确定也
    不需要做的非常精确，因为只要避免极大和极小两种情况，线程池的大小对系统的性能并不会影响太大。
    一般来说，确定线程池的大小需要考虑CPU数量、内存大小等因素。
    在《java concurrency in Practice》 一书中给出了估算线程池大小的计算公式：
        Ncpu = CPU 数量
        Ucpu = 目标CPU使用率，0 ≤ Ucpu ≤ 1
        W/C = 等待时间与计算时间的比率
        为保持处理器达到期望的使用率，最优的池的大小等于：
            Nthreads = Ncpu * Ucpu * （1 + W/C）
    获取CPU数量：Runtime.getRuntime().availableProcessors()